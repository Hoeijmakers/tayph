def statusbar(i,x):
    """
    This provides a little status indicator for use in long forloops.
    i is the counter (integer or float) of the forloop.
    x is either the total number of iterations (int/float) or
    the array through which is looped.

    Parameters
    ----------
    i : int, float
        Counter (integer or float) of the forloop.

    x : int, float or array-like
        Either the total number of iterations (int/float) or
        the array through which is looped.
    """
    if type(x) == int or type(x) == float:
        print('  '+f"{i/(float(x)-1)*100:.1f} %", end="\r")
    else:
        print('  '+f"{i/(len(x)-1)*100:.1f} %", end="\r")#Statusbar.



def start():
    """
    Short-hand for starting a timing measurement.
    """
    import time
    return(time.time())



def end(start,id=''):
    """
    Short-hand for ending a timing measurement and printing the elapsed time.

    Parameters
    ----------
    start : float
        Generated by time.time()

    id : str
        Description or numeral to identify the clock associated with the start time.

    Returns
    -------
    elapsed : float
        The time elapsed since start.
    """


    from tayph.vartests import typetest
    typetest(start,float,'start time in utils.end()')
    typetest(id,str,'id/descriptor in utils.end()')
    import time
    end=time.time()
    print('Elapsed %s: %s' % ('on timer '+id,end-start))
    return end-start


def save_stack(filename,list_of_2D_frames):
    """This code saves a stack of fits-files to a 3D cube, that you can play
    through in DS9. For diagnostic purposes.

    Parameters
    ----------
    filename : str, Path
        Output filename/path.

    list_of_2D-frames : list
        A list with 2D arrays

    Returns
    -------
    elapsed : float
        The time elapsed since start.

    """
    import astropy.io.fits as fits
    import numpy as np
    import pathlib
    from tayph.vartests import typetest
    from tayph.vartests import dimtest
    import warnings

    typetest(filename,[str,pathlib.PosixPath],'filename in save_stack()')#Test that we are dealing with a path.
    typetest(list_of_2D_frames,list,'list_of_2D_frames in save_stack()')#Test that its a list
    typetest(list_of_2D_frames[0],[list,np.ndarray],)
    for i,f in enumerate(list_of_2D_frames):
        typetest(f,[list,np.ndarray],'frame %s of list_of_2D_frames in save_stack()'%i)
        
    base = np.shape(list_of_2D_frames[0])
    N = len(list_of_2D_frames)

    dimtest(base,[2],'shape of list_of_2D_frames in save_stack()')#Test that its 2-dimensional
    for i,f in enumerate(list_of_2D_frames):
        dimtest(f,base,varname='frame %s of list_of_2D_frames in save_stack()'%i)#Test that all have the same shape.

    N = len(list_of_2D_frames)

    if N > 0:
        out = np.zeros((base[0],base[1],N))
        for i in range(N):
            out[:,:,i] = list_of_2D_frames[i]
        fits.writeto(filename,np.swapaxes(np.swapaxes(out,2,0),1,2),overwrite=True)
    else:
        warnings.warn("List_of_2D_frames has length zero. No output was generated by save_stack().", RuntimeWarning)


def writefits(filename,array):
    """
    This is a fast wrapper for fits.writeto, with overwrite enabled.

    """
    import astropy.io.fits as fits
    from tayph.vartests import typetest
    from tayph.vartests import dimtest
    typetest(filename,[str,pathlib.PosixPath],'filename in writefits()')#Test that we are dealing with a path.
    base = np.shape(array)
    dimtest(base,[2],'shape of array in writefits()')#Test that its 2-dimensional
    fits.writeto(filename,array,overwrite=True)
